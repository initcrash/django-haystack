[
  {
    "pk": 4,
    "model": "core.mockmodel",
    "fields": {
      "user": "daniel1",
      "foo": "Registering indexes in Haystack is very similar to registering models and ``ModelAdmin`` classes in the `Django admin site`_.  If you want to override the default indexing behavior for your model you can specify your own ``SearchIndex`` class.  This is useful for ensuring that future-dated or non-live content is not indexed and searchable. Our ``Note`` model has a ``pub_date`` field, so let's update our code to include our own ``SearchIndex`` to exclude indexing future-dated notes:",
      "pub_date": "2009-06-18 06:00:00"
    }
  },
  {
    "pk": 5,
    "model": "core.mockmodel",
    "fields": {
      "user": "daniel2",
      "foo": "Registering indexes in Haystack is very similar to registering models  and ModelAdmin classes in the Django admin site.  If you want to override the default indexing behavior for your model you can specify your own SearchIndex class.  This is useful for ensuring that future-dated or non-live content is not indexed and searchable. Our Note model has a pub_date field, so let's update our code to include our own SearchIndex to exclude indexing future-dated notes.",
      "pub_date": "2009-06-18 07:00:00"
    }
  },
  {
    "pk": 6,
    "model": "core.mockmodel",
    "fields": {
      "user": "daniel3",
      "foo": "Every custom ``SearchIndex`` requires there be one and only one field with ``document=True``.  This is the primary field that will get passed to the backend for indexing. For this field, you'll then need to create a template at  ``search/indexes/myapp/note_text.txt``. This allows you to customize the document  that will be passed to the search backend for indexing. A sample template might look like:",
      "pub_date": "2009-06-18 08:00:00"
    }
  }
]
